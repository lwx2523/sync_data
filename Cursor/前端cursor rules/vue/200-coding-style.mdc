---
alwaysApply: true
---

# 编码风格规范
- 编写简洁、技术性强的TypeScript代码，并提供准确的示例。
- 相较于代码复制，更倾向于迭代和模块化。
- 使用带有助动词的描述性变量名（例如，isLoading、hasError）。
- 使用组合 API 和声明式编程模式；避免使用选项 API。

## 通用规范
- 使用 2 空格缩进
- 行宽不超过 100 字符
- 文件末尾保留一个空行
- 使用分号结束语句
- 每个方法都必须有相关的注释方法说明

## 命名约定
- 变量和函数使用 camelCase 命名法
- 类和组件使用 PascalCase 命名法
- 常量使用 UPPER_SNAKE_CASE 命名法
- CSS类名使用 kebab-case 命名法

## 代码生成偏好
- 优先生成TypeScript代码，严格类型检查
- 优先使用异步/await而非Promise链
- 优先使用函数组件而非类组件
- 优先使用命名导出而非默认导出
- 优先使用解构赋值提取属性和参数

## 注释规范
- 每个函数都应有JSDoc风格的注释
- 复杂逻辑需要添加行内注释
- 代码块前使用块注释说明其功能
- TODO和FIXME使用统一格式：// TODO(username): 内容

## src/views 页面组件规范
- 目录必须是小写字母，或者以横杠连接的小写字母，如：home、home-log
- 每个目录下面，必须有 index.vue 主体页面文件，其他页面组件，在该目录下新建 components 目录，放在 components 目录下；
- 例如在 src/views 下面创建一个 bidding-production 目录，则需要自动生成 index.vue 主体页面文件，其他页面组件，则放在 bidding-production/components 目录下；
- 组件必须使用 <script setup> 语法
- Props 定义必须指定类型和默认值
- 禁止直接修改 props，使用 emit 通知父组件更新

## 新增页面或者路由
- 在 `src/views` 目录下，添加子目录和创建文件，遵循 `src/views 页面组件规范`
- 在 `src/router/modules/remaining.ts` 配置对应的菜单

## 国际化
该项目暂时不考虑国际化
